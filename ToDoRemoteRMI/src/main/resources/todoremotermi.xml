<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
						http://www.springframework.org/schema/aop
						http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
						http://www.springframework.org/schema/tx
        				http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


 <tx:annotation-driven transaction-manager="transactionManager" />
 
<!-- We define a Bean for datasource -->
<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:file:src/main/resources/todo" />
		<property name="username" value="sa" />
		<property name="password" value="" />
</bean>

<!--
We create Hibernate's SessionFactory bean
to get a Hibernate session in our program
If you pay attention you'll realize that this bean config
is somehow like the hibernate.cfg.xml configuration. We don't need
to create that file now.
-->
<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
	<property name="dataSource" ref="dataSource" />
	<property name="mappingResources">
		<list>
			<value>ToDo.hbm.xml</value>
		</list>		
	</property>
	<property name="hibernateProperties">
		<props>
			<prop key="hibernate.show_sql">true</prop>
			<prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</prop>
		</props>
		
	</property>
</bean>
<!-- 
In linux console, hsqldb-databasemanager
Generates todo.log and todo.properties
create table todo (
id identity,
name varchar(30),
description varchar(255),
date date,
done boolean);

insert into todo values(null,'Blog','Improve the blog','2013-07-24',false);

 -->
<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory" />
</bean>

<bean id="toDoDAO" class="info.pello.spring.todo.rmi.ToDoDAO" >
	<property name="sessionFactory" ref="sessionFactory" />
</bean>

<!-- 
This is our service implementation
We inject our hibernate DAO
 -->
<bean id="toDoServiceImpl" class="info.pello.spring.todo.rmi.ToDoServiceImpl">
	<property name="toDoDAO" ref="toDoDAO" />
</bean>

<!-- 
This will reguister our service as a RMI service
at local ip on default 1099 port , but we will be more specific
-->
<bean class="org.springframework.remoting.rmi.RmiServiceExporter"
	p:service-ref="toDoServiceImpl"
	p:serviceName="ToDoService"
	p:serviceInterface="info.pello.spring.todo.rmi.ToDoService"
 />

<!-- If we want to inject a RMI in our main class to avoid RMI boilerplate -->
<bean id="toDoServiceRMI" class="org.springframework.remoting.rmi.RmiProxyFactoryBean"
	p:serviceUrl="rmi://artean/ToDoService"
	p:serviceInterface="info.pello.spring.todo.rmi.ToDoService" />


</beans>
